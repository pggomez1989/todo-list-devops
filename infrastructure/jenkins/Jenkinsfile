pipeline {
    agent any
    environment {
        GIT_REPOSITORY = "git@github.com:pggomez1989/todo-list-devops.git"
        BRANCH_PROJECT = "main"
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key') 
    }
    parameters {
        booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Set to true to destroy the infrastructure')
    }
    stages {
        // stage('Build start') {
        //     steps {
        //         git branch: "${BRANCH_PROJECT}",
        //             credentialsId: '7df94e06-bbc2-4332-83e5-dfac02b22fd6',
        //             url: "${GIT_REPOSITORY}"
        //     }
        // }
        stage('Setup Terraform') {
            steps {
                dir('infrastructure/terraform') {
                    script {
                        // Verifica la versión de Terraform
                        sh 'terraform --version'
                        
                        // Inicializa Terraform
                        def tfInitStatus = sh(script: 'terraform init', returnStatus: true)
                        
                        // Verifica el resultado de la inicialización de Terraform
                        if (tfInitStatus == 0) {
                            echo 'Terraform initialized successfully.'
                        } else {
                            error 'Failed to initialize Terraform.'
                        }
                    }
                }
            }
        }
        stage('Apply Terraform') {
            when {
                expression { return !params.DESTROY_INFRA }
            }
            steps {
                dir('infrastructure/terraform') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Destroy Terraform') {
            when {
                expression { return params.DESTROY_INFRA }
            }
            steps {
                dir('infrastructure/terraform') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
        stage('Obtain Instance IP') {
            when {
                expression { return !params.DESTROY_INFRA }
            }
            steps {
                script {
                    dir('infrastructure/terraform') {
                        def instance_ip = sh(script: 'terraform output -raw instance_ip', returnStdout: true).trim()
                        echo "Instance IP: ${instance_ip}"
                        if (!instance_ip) {
                            error "Failed to obtain instance IP from Terraform output"
                        }
                        env.INSTANCE_IP = instance_ip
                    }
                }
            }
        }
        stage('Provisionando infra') {
            when {
                expression { return !params.DESTROY_INFRA }
            }
            steps {
                sh 'sleep 30'
            }
        }
        stage('Deploy Docker Compose') {
            when {
                expression { return !params.DESTROY_INFRA }
            }
            steps {
                script {
                    sshagent(credentials: ['my-ssh-key']) {
                        // Clonar el repositorio
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.INSTANCE_IP} 'git clone https://github.com/pggomez1989/todo-list-devops.git /home/ubuntu/todo-list-devops'"
                        sh 'sleep 60'
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.INSTANCE_IP} 'docker-compose --version'"
                        // Entrar al directorio del repositorio y ejecutar docker-compose
                        sh "ssh -o StrictHostKeyChecking=no ubuntu@${env.INSTANCE_IP} 'cd /home/ubuntu/todo-list-devops/app && sudo docker-compose up -d'"
                    }
                }
            }
        }

    }
}
